(function() {var implementors = {};
implementors["alloc_wg"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"alloc_wg/alloc/struct.Layout.html\" title=\"struct alloc_wg::alloc::Layout\">Layout</a>&gt; for <a class=\"struct\" href=\"alloc_wg/alloc/struct.NonZeroLayout.html\" title=\"struct alloc_wg::alloc::NonZeroLayout\">NonZeroLayout</a>","synthetic":false,"types":["alloc_wg::alloc::layout::NonZeroLayout"]},{"text":"impl&lt;T, const N:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"alloc_wg/boxed/struct.Box.html\" title=\"struct alloc_wg::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[</a>T<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">]</a>, <a class=\"struct\" href=\"alloc_wg/alloc/struct.Global.html\" title=\"struct alloc_wg::alloc::Global\">Global</a>&gt;&gt; for <a class=\"struct\" href=\"alloc_wg/boxed/struct.Box.html\" title=\"struct alloc_wg::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[</a>T<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">; N]</a>&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[</a>T<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">; N]</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/array/trait.LengthAtMost32.html\" title=\"trait core::array::LengthAtMost32\">LengthAtMost32</a>,&nbsp;</span>","synthetic":false,"types":["alloc_wg::boxed::Box"]}];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()